[
{
	"uri": "//localhost:1313/en/",
	"title": "CloudFront Advanced Caching and Security",
	"tags": [],
	"description": "",
	"content": "Working with CloudFront Advanced Caching and Security Overview In this lab, you will learn the basic concepts and practice CloudFront Advanced Caching and Security. You will practice connecting to a public server and a private server in a VPC.\nContent Introduction Prerequisites Access AWS Lambda Set up Signed URLs Field-level Encryption Cost Optimization Monitoring and Logging Clean up AWS Resources "
},
{
	"uri": "//localhost:1313/en/3-accessawslambda/3.1-createalambdafunction/",
	"title": "Create a Lambda function",
	"tags": [],
	"description": "",
	"content": "Configuring Lambda@Edge to Add Security Headers for CloudFront 🔹 Step 1: Create a Lambda Function Go to AWS Lambda. Select Region: US East (N. Virginia) (us-east-1). Click Create function. Choose Author from scratch, then configure: Function name: AddSecurityHeaders Runtime: Node.js 18.x "
},
{
	"uri": "//localhost:1313/en/2-prerequiste/2.1-createbucket/",
	"title": "Create bucket",
	"tags": [],
	"description": "",
	"content": "\nBucket name: webbadmintonvideo\nRegion: US East (N. Virginia) us-east-1 Bucket type: General purpose ACLs: Select ACLs disabled (recommended) Block Public Access: Turn off all blocks, check “I acknowledge… Upload the entire built folder\n"
},
{
	"uri": "//localhost:1313/en/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Amazon CloudFront is AWS’s powerful Content Delivery Network (CDN), designed to deliver content with low latency and high performance worldwide. But CloudFront is more than just speed — it offers two strategic capabilities: Advanced Caching and Security, helping to optimize traffic flow, reduce costs, and protect systems against modern threats.\nAdvanced Caching CloudFront provides customizable caching strategies to reduce origin load and improve response time:\nCaching based on custom parameters: Cache can be tailored using query strings, cookies, headers, or device types (mobile/desktop). Cache Policies \u0026amp; Origin Request Policies: Separate what affects cache key versus what is forwarded to the origin → minimizes unnecessary cache misses. Lambda@Edge / CloudFront Functions: Run logic at edge locations (e.g., redirects, token validation, URL rewrites) without needing to contact the origin. Field-Level Encryption: Encrypt sensitive data fields at the edge → only the origin can decrypt them. Effective caching = Faster responses + Reduced server load + Lower costs.\nSecurity Features CloudFront is tightly integrated with AWS’s security ecosystem to provide comprehensive protection for your content and users:\nAWS WAF: A web application firewall that blocks SQL injection, XSS, bots, and layer 7 DDoS attacks. Geo Restriction: Restrict content access based on geographic regions — useful for licensing and regional control. HTTPS \u0026amp; TLS (SSL Certificates): Full HTTPS support with customizable SSL certificates and the latest TLS versions. Signed URLs / Signed Cookies: Deliver private content securely with time-limited access mechanisms. AWS Shield Standard: Built-in, no-cost protection against layer 3 and 4 DDoS attacks on all distributions. CloudFront is not just fast — it’s fortified with robust security capabilities.\n"
},
{
	"uri": "//localhost:1313/en/3-accessawslambda/3.2-addcodetohandlesecurityheaders/",
	"title": "Add code to handle security headers",
	"tags": [],
	"description": "",
	"content": "Add the following code to your Lambda function:\n\u0026#39;use strict\u0026#39;;\rexport const handler = async (event) =\u0026gt; {\rconst response = event.Records[0].cf.response;\rconst headers = response.headers;\rheaders[\u0026#39;strict-transport-security\u0026#39;] = [\r{ key: \u0026#39;Strict-Transport-Security\u0026#39;, value: \u0026#39;max-age=63072000; includeSubDomains; preload\u0026#39; }\r];\rheaders[\u0026#39;content-security-policy\u0026#39;] = [\r{ key: \u0026#39;Content-Security-Policy\u0026#39;, value: \u0026#34;default-src \u0026#39;self\u0026#39;\u0026#34; }\r];\rheaders[\u0026#39;x-content-type-options\u0026#39;] = [\r{ key: \u0026#39;X-Content-Type-Options\u0026#39;, value: \u0026#39;nosniff\u0026#39; }\r];\rheaders[\u0026#39;x-frame-options\u0026#39;] = [\r{ key: \u0026#39;X-Frame-Options\u0026#39;, value: \u0026#39;DENY\u0026#39; }\r];\rheaders[\u0026#39;x-xss-protection\u0026#39;] = [\r{ key: \u0026#39;X-XSS-Protection\u0026#39;, value: \u0026#39;1; mode=block\u0026#39; }\r];\rreturn response;\r}; "
},
{
	"uri": "//localhost:1313/en/2-prerequiste/2.2-createcloudfrontdistribution/",
	"title": "Create CloudFront Distribution",
	"tags": [],
	"description": "",
	"content": "Step 1: Create a CloudFront Distribution Click on: Create a CloudFront distribution\nDistribution name: webbadmintonvideo_Distribution\nDescription: CDN for static site hosted on S3\nDistribution type: Select Single website or app\nClick: Next\nStep 2: Select Origin Choose: Amazon S3 S3 origin: webbadmintonvideo.s3-website-us-east-1.amazonaws.com Check: Enable security protections Step 3: Review Your Settings Distribution name Origin Security settings Step 4: Select Legacy Access Identities Step 5: Add Path Pattern for Images Path pattern: /images/* Origin: webbadmintonvideo.s3-website-us-east-1.amazonaws.com Compress objects automatically: Yes Viewer protocol policy: Redirect HTTP to HTTPS Allowed HTTP methods: GET, HEAD Restrict viewer access: No "
},
{
	"uri": "//localhost:1313/en/2-prerequiste/",
	"title": "Preparation Steps",
	"tags": [],
	"description": "",
	"content": "To implement CloudFront Advanced Caching and Security, we need to prepare the basic infrastructure, including an S3 bucket to store the static website and a CloudFront Distribution to deliver content through AWS’s global edge network. In addition, we need to configure appropriate IAM Roles and Policies to ensure that CloudFront, Lambda@Edge, and S3 can interact securely. Contents Create S3 Create CloudFront Distribution "
},
{
	"uri": "//localhost:1313/en/3-accessawslambda/",
	"title": "Access AWS Lambda",
	"tags": [],
	"description": "",
	"content": "Introduction:\nIn this step, we will deploy AWS Lambda@Edge to perform advanced processing on requests and responses of the CloudFront Distribution.\nThe main goal is to add security headers to the responses returned to the users, thereby enhancing the security of the website distributed via CloudFront.\nContent 3.1. Create a Lambda function\n3.2. Add code to handle security headers\n3.3. Grant IAM permissions to the Lambda function\n3.4. Attach the Lambda to a Behavior in CloudFront\n3.5. Create and assign an Origin Access Identity\n"
},
{
	"uri": "//localhost:1313/en/3-accessawslambda/3.3-grantiampermissionstothelambdafunction/",
	"title": "Grant IAM Permissions to Lambda Function",
	"tags": [],
	"description": "",
	"content": "Go to Roles\nSearch for the role named: LambdaEdgeSecurityRole\nSelect the Trust relationships tab -\u0026gt; Edit trust policy\nReplace the trust policy content:\n{\r\u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;,\r\u0026#34;Statement\u0026#34;: [\r{\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Principal\u0026#34;: {\r\u0026#34;Service\u0026#34;: [\r\u0026#34;lambda.amazonaws.com\u0026#34;,\r\u0026#34;edgelambda.amazonaws.com\u0026#34;\r]\r},\r\u0026#34;Action\u0026#34;: \u0026#34;sts:AssumeRole\u0026#34;\r}\r]\r} Version description: V1 -\u0026gt; Publish\n"
},
{
	"uri": "//localhost:1313/en/3-accessawslambda/3.4-attachlambdatoabehaviorincloudfront/",
	"title": "Associate Lambda with a Behavior in CloudFront",
	"tags": [],
	"description": "",
	"content": "Go to CloudFront -\u0026gt; Select the distribution -\u0026gt; Open the Behaviors tab -\u0026gt; Click on /index.html -\u0026gt; Click Edit.\nFunction type: Lambda@Edge\nFunction ARN: arn:aws:lambda:us-east-1:806361468439:function:AddSecurityHeaders:3\nClick: Save changes\n"
},
{
	"uri": "//localhost:1313/en/4-enablesignedurls/",
	"title": "Create CloudFront Key Pair",
	"tags": [],
	"description": "",
	"content": "Step 1: Create a CloudFront Key Pair Go to the Security tab → Key management\nClick Create public key\nName: CloudFrontPublicKey\nDownload the .pem file (public key)\nStep 2: Paste into the key After creating the public key\nCreate a Key Group Fill in the details: Name: my-key-group\nDescription (optional): Key group for signed URL\nPublic keys: Select the public key you just created (e.g., my-signed-url-key)\nClick Create key group Assign the Key Group to a CloudFront Behavior Go to CloudFront \u0026gt; Distributions\nOpen the Behaviors tab\nScroll down to Restrict viewer access (use signed URLs or signed cookies) Select Yes In Trusted key groups Check the key group you just created (my-key-group) Click Save changes Generate a Signed URL with Python Install Python first\nlink: https://www.python.org/downloads/windows/\nAfter installation,\nOpen the terminal and run the following command to install the library:\npip install cryptography\nNavigate to the folder containing private_key.pem, then open VS Code\nimport base64 import time from cryptography.hazmat.primitives import serialization, hashes from cryptography.hazmat.primitives.asymmetric import padding cloudfront_url = \u0026#34;https://dwlpqynbljc1b.cloudfront.net/index.html\u0026#34; key_pair_id = \u0026#34;K31UET7UCHMLP6\u0026#34; private_key_file = \u0026#34;private_key.pem\u0026#34; expire_time = int(time.time()) + 3600 policy = f\u0026#39;\u0026#39;\u0026#39;{{\u0026#34;Statement\u0026#34;:[{{\u0026#34;Resource\u0026#34;:\u0026#34;{cloudfront_url}\u0026#34;,\u0026#34;Condition\u0026#34;:{{\u0026#34;DateLessThan\u0026#34;:{{\u0026#34;AWS:EpochTime\u0026#34;:{expire_time}}}}}}}]}}\u0026#39;\u0026#39;\u0026#39; with open(private_key_file, \u0026#34;rb\u0026#34;) as key_file: private_key = serialization.load_pem_private_key( key_file.read(), password=None, ) signature = private_key.sign( policy.encode(), padding.PKCS1v15(), hashes.SHA1() ) def url_safe_b64encode(data): return base64.b64encode(data).decode(\u0026#34;utf-8\u0026#34;)\\ .replace(\u0026#34;+\u0026#34;, \u0026#34;-\u0026#34;)\\ .replace(\u0026#34;=\u0026#34;, \u0026#34;_\u0026#34;)\\ .replace(\u0026#34;/\u0026#34;, \u0026#34;~\u0026#34;) encoded_signature = url_safe_b64encode(signature) encoded_policy = url_safe_b64encode(policy.encode()) signed_url = f\u0026#34;{cloudfront_url}?Policy={encoded_policy}\u0026amp;Signature={encoded_signature}\u0026amp;Key-Pair-Id={key_pair_id}\u0026#34; print(\u0026#34;🎯 Signed URL:\u0026#34;) print(signed_url) **Notes:\nThe domain name must match the one in AWS CloudFront\nUse the correct Key Pair ID\nIn the folder containing the .py file, run:\nIt will output:\n"
},
{
	"uri": "//localhost:1313/en/3-accessawslambda/3.5-createandassignoriginaccessidentity/",
	"title": "Create and Assign Origin Access Identity",
	"tags": [],
	"description": "",
	"content": "Go to CloudFront -\u0026gt; Select your distribution -\u0026gt; Open the Origins tab -\u0026gt; Click Edit -\u0026gt; Create a new OAI\nName: webbadmintonvideo.s3.us-east-1.amazonaws.com\nClick: Create\nDistribution domain name\ndwlpqynbljc1b.cloudfront.net/index.html\n"
},
{
	"uri": "//localhost:1313/en/5-field-levelencryption/",
	"title": "Field-Level Encryption",
	"tags": [],
	"description": "",
	"content": "Open Git Bash and run the following two commands:\nopenssl genrsa -out private_key.pem 2048\nopenssl rsa -pubout -in private_key.pem -out public_key.pem\nGo to the Public keys tab → click Create public key\nPaste the content from the public_key.pem file you just created\nName it: FLE-PublicKey\nClick Create public key\n"
},
{
	"uri": "//localhost:1313/en/6-costoptimization/",
	"title": "Enable Compression and Redirect to HTTPS",
	"tags": [],
	"description": "",
	"content": "Go to the Behaviors tab\nFind the row with Path pattern = Default (*)\nClick Edit\nScroll down to the Response headers policy section\nSelect: Managed-SecurityHeadersPolicy\nClick Save changes\nCreate a Custom Cache Policy Go to CloudFront → Policies \u0026gt; Cache policies\nClick Create cache policy\nName: CustomLongTTLPolicy\rDescription: Long-lived cache for static content\rMinimum TTL: 1\rDefault TTL: 86400\rMaximum TTL: 31536000\rHeaders: None\rQuery strings: None\rCookies: None\rCompression: Gzip, Brotli Assign the Cache Policy to Behaviors Go to CloudFront \u0026gt; Distributions\nOpen the Behaviors tab\nClick Edit on the desired behavior\nCache policy name:\nSelect: CustomLongTTLPolicy\nClick Save changes\n⚠️ Note: Do not assign this policy to /index.html if you require the content to always be up to date.\nOptimize TTL and Limit Logging Step 1: Access the log bucket Go to AWS Console → S3 Locate and click on the bucket: webbadmintonvideo Step 2: Open the Management tab Inside the bucket, select the Management tab Click Create lifecycle rule Step 3: Name the rule: ExpireCloudFrontLogs Check: Limit the scope of this rule using one or more filters\nEnter: AWSLogs/your-account-id/CloudFront/\nNote: Replace your-account-id with your AWS account ID.\nIn Lifecycle rule actions, check: Expire current versions of objects\nEnter number of days: 30\nConfirmation screen showing that the Lifecycle Rule has been successfully configured\n"
},
{
	"uri": "//localhost:1313/en/7-monitoringandlogging/",
	"title": "Create an S3 Bucket for Logs",
	"tags": [],
	"description": "",
	"content": "Go to AWS S3 Console\nClick Create bucket\nEnter the bucket name, for example: cloudfront-logs-2025-demo\nDisable \u0026ldquo;Block all public access\u0026rdquo;\nEnable versioning\nClick Create bucket\nCreate a Glue Database Go to AWS Glue Console\nSelect the Databases tab → Click Add database\nName it: cloudfront_logs_db\nClick Create\n"
},
{
	"uri": "//localhost:1313/en/8-cleanupawsresources/",
	"title": "Delete CloudFront Distribution",
	"tags": [],
	"description": "",
	"content": " Go to CloudFront Console Select the created Distribution → Disable After the status changes to Disabled, select Delete Delete S3 Buckets Includes: The bucket containing the static website The bucket containing CloudFront logs Go to S3 Console → Empty bucket → Delete bucket Type: permanently delete\nSelect: Delete\nBucket name: webbadmintonvideo\nSuccessfully deleted\nDelete Lambda@Edge Functions Go to Lambda Console in us-east-1\nFind the AddSecurityHeaders function or other functions used in the lab\nDelete the published versions\nThen Delete function\nDelete IAM Roles and Policies created for the lab Examples: LambdaEdgeSecurityRole IAM user/role used for Signed URLs Go to IAM Console → Delete role Delete CloudFront Key Groups and Public Keys Go to CloudFront → Key management Delete: Public key (CloudFrontPublicKey, FLE-PublicKey) Key group (my-key-group) Delete Glue and Log Data Glue Crawler (cf-log-crawler) → Delete\nGlue Database (cloudfront_logs_db) → Delete\nAction: Delete Crawlers\nDelete Glue Database In Glue Console → Databases tab\nFind the database cloudfront_logs_db\nSelect Delete → Confirm\n"
},
{
	"uri": "//localhost:1313/en/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/en/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]